from __future__ import division
import time
import cv2
import sys
import torch
from darknet import Darknet
from utils.detection_boxes import DetectBoxes
import PySimpleGUI as sg
from utils.class_labels import *


def arg_parse():
    i_vid = r'assets/cars.mp4'
    y_path = r'config/coco.names'
    weight_path = r'weight/yolov3.weights'
    cfg_path = r'config/yolov3.cfg'
    layout = [
        [sg.Text('Tensorflow-YOLO Video Player', size=(18, 1), font=('Any', 18), text_color='#1c86ee', justification='left')],
        [sg.Text('Path to input video'), sg.In(i_vid, size=(40, 1), key='video'), sg.FileBrowse()],
        [sg.Text('Path to cfg File'), sg.In(cfg_path, size=(40, 1), key='cfg_path'), sg.FileBrowse()],
        [sg.Text('Path to weight File'), sg.In(weight_path, size=(40, 1), key='weight_path'), sg.FileBrowse()],
        [sg.Text('Path to label'), sg.In(y_path, size=(40, 1), key='label_path'), sg.FolderBrowse()],
        [sg.Text('Confidence'),
         sg.Slider(range=(0, 1), orientation='h', resolution=.1, default_value=.5, size=(15, 15), key='confidence')],
        [sg.Text('NMSThreshold'),
         sg.Slider(range=(0, 1), orientation='h', resolution=.1, default_value=.4, size=(15, 15), key='nms_threshold')],
        [sg.Text('Resolution'), sg.Radio('320', "resolution", key="small_resol"),
         sg.Radio('416', "resolution", default=True, key="best_resol"),
         sg.Radio('512', "resolution", key="large_resol")],
        [sg.Text("Classes not to detect"), sg.Listbox(values=class_names, default_values=class_names,
                                                      select_mode=sg.LISTBOX_SELECT_MODE_MULTIPLE, size=(30, 10),
                                                      key='class_list')],
        [sg.Text(' ' * 8), sg.Checkbox('Use webcam', key='webcam')],
        [sg.OK(), sg.Cancel()]
    ]
    win = sg.Window('YOLO Video',
                    default_element_size=(14, 1),
                    text_justification='right',
                    auto_size_text=False).Layout(layout)
    event, values = win.Read()

    if event is None or event == 'Cancel':
        exit()
    args = values

    win.Close()

    return args


def main():
    args = arg_parse()

    VIDEO_PATH = args['video'] if not args['webcam'] else 0

    resolution_list = [320, 416, 512]
    index = [args['small_resol'], args['best_resol'], args['large_resol']].index(True)
    inp_dim = resolution_list[index]

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    print("Loading network.....")
    model = Darknet(args['cfg_path'], img_size=inp_dim).to(device)
    model.load_darknet_weights(args['weight_path'])
    print("Network successfully loaded")

    model.eval()

    # load detection class, default confidence threshold is 0.5
    detect = DetectBoxes(args['label_path'], conf_threshold=args['confidence'], nms_threshold=args['nms_threshold'])

    try:
        # Read Video file
        cap = cv2.VideoCapture(VIDEO_PATH)
    except IOError:
        print("Input video file", VIDEO_PATH, "doesn't exist")
        sys.exit(1)

    win_started = False
    while cap.isOpened():
        hasFrame, frame = cap.read()

        if not hasFrame:
            break

        start = time.time()
        detect.bounding_box_yolo(frame, inp_dim, model)

        imgbytes = cv2.imencode('.png', frame)[1].tobytes()  # ditto

        if not win_started:
            win_started = True
            layout = [
                [sg.Text('Yolo Output')],
                [sg.Image(data=imgbytes, key='_IMAGE_')],
                [sg.Exit()]
            ]
            win = sg.Window('YOLO Output',
                            default_element_size=(14, 1),
                            text_justification='right',
                            auto_size_text=False).Layout(layout).Finalize()
            image_elem = win.FindElement('_IMAGE_')
        else:
            image_elem.Update(data=imgbytes)

        event, values = win.Read(timeout=0)
        if event is None or event == 'Exit':
            break
        end = time.time()
        print("FPS {:5.2f}".format(1 / (end - start)))

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    win.Close()
    print("Video ended")

    # releases video and removes all windows generated by the program
    cap.release()


# Starting a program
if __name__ == "__main__":
    main()
